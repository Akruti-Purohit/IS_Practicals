#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generateKeyTable(char key[], char keyTable[SIZE][SIZE]) {
    int i, j, k, flag = 0;
    int dict[26] = {0};

    for (i = 0; i < strlen(key); i++) {
        if (key[i] != 'j') {
            dict[key[i] - 'a'] = 2;
        }
    }
    dict['j' - 'a'] = 1;

    i = 0;
    j = 0;
    for (k = 0; k < strlen(key); k++) {
        if (dict[key[k] - 'a'] == 2) {
            keyTable[i][j] = key[k];
            dict[key[k] - 'a'] -= 1;
            j++;
            if (j == SIZE) {
                i++;
                j = 0;
            }
        }
    }

    for (k = 0; k < 26; k++) {
        if (dict[k] == 0) {
            keyTable[i][j] = (char)(k + 'a');
            j++;
            if (j == SIZE) {
                i++;
                j = 0;
            }
        }
    }
}

void search(char keyTable[SIZE][SIZE], char a, char b, int arr[]) {
    int i, j;

    if (a == 'j') {
        a = 'i';
    } else if (b == 'j') {
        b = 'i';
    }

    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (keyTable[i][j] == a) {
                arr[0] = i;
                arr[1] = j;
            } else if (keyTable[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}

void encrypt(char str[], char keyTable[SIZE][SIZE]) {
    int i, a[4];

    for (i = 0; i < strlen(str); i += 2) {
        if (str[i] == str[i + 1]) {
            memmove(&str[i + 1], &str[i], strlen(str) - i);
            str[i + 1] = 'x';
            str[strlen(str)] = '\0';
        }
    }

    if (strlen(str) % 2 != 0) {
        str[strlen(str)] = 'x';
        str[strlen(str) + 1] = '\0';
    }

    for (i = 0; i < strlen(str); i += 2) {
        search(keyTable, str[i], str[i + 1], a);

        if (a[0] == a[2]) {
            str[i] = keyTable[a[0]][(a[1] + 1) % SIZE];
            str[i + 1] = keyTable[a[2]][(a[3] + 1) % SIZE];
        } else if (a[1] == a[3]) {
            str[i] = keyTable[(a[0] + 1) % SIZE][a[1]];
            str[i + 1] = keyTable[(a[2] + 1) % SIZE][a[3]];
        } else {
            str[i] = keyTable[a[0]][a[3]];
            str[i + 1] = keyTable[a[2]][a[1]];
        }
    }
}

void decrypt(char str[], char keyTable[SIZE][SIZE]) {
    int i, a[4];

    for (i = 0; i < strlen(str); i += 2) {
        search(keyTable, str[i], str[i + 1], a);

        if (a[0] == a[2]) {
            str[i] = keyTable[a[0]][(a[1] - 1 + SIZE) % SIZE];
            str[i + 1] = keyTable[a[2]][(a[3] - 1 + SIZE) % SIZE];
        } else if (a[1] == a[3]) {
            str[i] = keyTable[(a[0] - 1 + SIZE) % SIZE][a[1]];
            str[i + 1] = keyTable[(a[2] - 1 + SIZE) % SIZE][a[3]];
        } else {
            str[i] = keyTable[a[0]][a[3]];
            str[i + 1] = keyTable[a[2]][a[1]];
        }
    }
}

void prepareString(char str[], char preparedStr[]) {
    int i, j = 0;

    for (i = 0; i < strlen(str); i++) {
        if (isalpha(str[i])) {
            preparedStr[j++] = tolower(str[i]);
        }
    }

    preparedStr[j] = '\0';
}

int main() {
    char key[SIZE * SIZE], keyTable[SIZE][SIZE];
    char str[100], preparedStr[100];

    // Input key
    printf("Enter key: ");
    gets(key);

    // Generate key table
    generateKeyTable(key, keyTable);

    // Input plaintext
    printf("Enter plaintext: ");
    gets(str);

    // Prepare plaintext
    prepareString(str, preparedStr);

    // Encrypt the plaintext
    encrypt(preparedStr, keyTable);
    printf("Encrypted text: %s\n", preparedStr);

    // Decrypt the ciphertext
    decrypt(preparedStr, keyTable);
    printf("Decrypted text: %s\n", preparedStr);

    return 0;
}
/*
Enter key: Akruti
Enter plaintext: Welcome to DSU
Encrypted text: sghdpnlAqbxA
Decrypted text: welcometodsu
*/
